import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * 
 * @author Bridget Naylor 
 *
 * Creates Linked list from text file of songs
 *
 */



public class Main {
	
	//list of songs
	static LinkedList songList = new LinkedList();
	
	public static void main(){
		
		//Reads the songs.txt file and adds them to the list
		readFile();
		
		songList.sort();
		
		int userChoice = getUserChoice();
		
		if ( userChoice == 1 ) {
			
			add();
			
		} else if ( userChoice == 2 ) {
			
			playTopSong();
			
		} else if ( userChoice == 3 ) {
			
			searchByArtistTitle();
			
		} else if ( userChoice == 4 ) {
			
			searchByArtist();
			
		} else if ( userChoice == 5 ) {
			
			searchByDecade();
			
		} else if ( userChoice == 6 ) {
			
			display();
			
		} else if ( userChoice == 7) {
			
			quit();
			
		}

	}
	
	/**
	 * Prompts user to choose an option
	 * @return int corresponding to the user's choice
	 */
	public static int getUserChoice() {
		
		System.out.println( "JukeBox" );
		
		System.out.println( "1. Add A Song" );
		
		System.out.println( "2. Play Top Song" );
		
		System.out.println( "3. Search By Title and Artist" );
		
		System.out.println( "4. Search By Artist" );
		
		System.out.println( "5. Search By Decade" );
		
		System.out.println( "6. Display Songs" );
		
		System.out.println( "7. Quit" );
		
		System.out.println( "Enter Choice: " );


		int userChoice = CheckInput.getIntRange( 1, 7 );
		
		return userChoice;
	}
	
	/**
	 * Choice 1 on the list
	 * Add -prompt the user for the Song’sdata, then add the Song to the list, then resort the list.
	 * 
	 */
	public static void add () {
		
		Song songToAdd = null;
		
		System.out.println( "Enter Title: " );

		String title = CheckInput.getString();
		
		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		System.out.println( "Enter Year(if no year put 0): " );
		
		int year = CheckInput.getInt();
		
		if ( year != 0 ) {
			
			System.out.println( "Enter Rating: " );

			int rating = CheckInput.getInt();
			
			songToAdd = new Song( title, artist, year, rating);
			
			
			
		} else {
			
			songToAdd = new Song( title, artist);
			
		}
		
		songList.add( songToAdd );
		
		songList.sort();	
		
	}
	
	/**
	 * Choice 2
	 * Play - remove the Song from the front of the list 
	 * (the song removed should always be the highest rated song in the list).  
	 * Display that Song’s information
	 */
	public static void playTopSong () {
		
		Song removedSong = songList.remove();
				
		System.out.println ( removedSong.toString() );
		
	}
	
	/**
	 * by Title and Artist – prompt the user to enter a title and artist name, 
	 * then display the matching Song, or “Not Found” if it does not exist
	 */
	public static void searchByArtistTitle () {
		
		System.out.println( "Enter Title: " );

		String title = CheckInput.getString();
		
		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		Song songToFind = new Song( title, artist );
		
		for ( int i = 0; i < songList.size(); i++ ) {
			
			Song songRemoved = songList.remove();
			
			if ( songRemoved.equals( songToFind ) ) {
				
				System.out.println ( songRemoved.toString() );
				
			}	
		}
		
		System.out.println ( "Not Found" );
	}
	
	/**
	 * Artist – prompt the user to enter a artist name, 
	 * then display all songs by that artist
	 */
	public static void searchByArtist () {

		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		for ( int i = 0; i < songList.size(); i++ ) {
			
			Song songRemoved = songList.remove();
			
			if ( songRemoved.getArtist().equalsIgnoreCase( artist ) ) {
				
				songRemoved.toString();
				
			}	
		}
	}
	
	/**
	 * TODO Finish this method
	 * by Decade – prompt the user to enter a decade, 
	 * then display all Songs in the list from that decade (ex. 80’s = 1980-1989)
	 */
	public static void searchByDecade () {

		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		for ( int i = 0; i < songList.size(); i++ ) {
			
			Song songRemoved = songList.remove();
			
			if ( songRemoved.getArtist().equalsIgnoreCase( artist ) ) {
				
				songRemoved.toString();
				
			}	
		}
	}
	
	/**
	 * Display –display the number of songs, 
	 * then display each of the Songs in the list 
	 * (they should already be sorted by rating
	 */
	public static void display () {
		
		System.out.println( songList.size() );
		
		songList.display();
		
	}
	
	/**
	 * TODO: Finish this method
	 * Write the list of Songs back to the file using the toString() function
	 */
	public static void quit() {
		
	}
	
	
	/**
	 *  Pass in the user’s file selection and the 2D array of Strings.  
	 *  Read in the file’s contents and place two of each card value in the array
	 *  @param int userFile selection
	 *  @param String[][] array the empty deck
	 * */
	public static void readFile() {
		
		
		
		Scanner myReader = new Scanner( "songs.txt" );
		
		String data = "";
		
		int beginIndex = 0;
		
		int endIndex = 0;
		
		String title = "";
		
		String artist = "";
		
		int year = 0;
		
		int rating = 0;
		
		data = myReader.nextLine();
		
		for (int i = 0; i < data.length(); i++) {
			
			if ( data.charAt(i) != ',' && i + 1 < data.length() ) {
				
				endIndex = i + 1;
				
			} else if ( data.charAt(i) == ',' && title.equals("")) {
				
				title = data.substring(beginIndex, endIndex);
				beginIndex = endIndex;
				
			} else if ( data.charAt(i) == ',' && artist.equals("")) {
				
				artist = data.substring(beginIndex, endIndex);
				beginIndex = endIndex;
				
			} else if ( data.charAt(i) == ',' && year == 0) {
				
				year = Integer.parseInt(( data.substring( beginIndex, endIndex )));
				beginIndex = endIndex;
				 
			} else if ( year != 0) {
				
				rating = Integer.parseInt(( data.substring( beginIndex, endIndex )));
				beginIndex = endIndex;
				
			}
			
			
		}
		
		Song songToAdd = null;
		
		if ( year == 0 ) {
			
			songToAdd = new Song( title, artist );
			
		} else if ( year != 0 ) {

			songToAdd = new Song( title, artist, year, rating );
			
		}
		
			
		songList.add(songToAdd);
		
		myReader.close();
	}
}
