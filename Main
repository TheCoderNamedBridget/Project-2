

/**
 * Creates sorted Linked list from text file of songs
 * Offers user a reoccurring menu with options
 * 1.Add a Song
 * 2.Play Highest Rated Song and remove from JukeBox
 * 3.Search By Artist and Title(for a song)
 * 4.Search By Artist(for a list of songs)
 * 5.Search By Decade(for a list of songs from that decade)
 * 6.Display List of Songs
 * 7.Quit(Exit menu and do not repeat)
 * 
 * @author Bridget Naylor 
 * @date 4/26/20
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

public class Main {
	
	//list of songs
	static LinkedList songList = new LinkedList();
	
	public static void main( String[] args  ) throws FileNotFoundException{
		
		//Reads the songs.txt file and adds them to the list
		readFile();
		
		boolean quit = false;
		
		//continue showing menu until user chooses to quit
		while ( !quit ) {
			
			songList.sort();
			
			int userChoice = getUserChoice();
			
			if ( userChoice == 1 ) {
				
				add();
				
			} else if ( userChoice == 2 ) {
				
				playTopSong();
				
			} else if ( userChoice == 3 ) {
				
				searchByArtistTitle();
				
			} else if ( userChoice == 4 ) {
				
				searchByArtist();
				
			} else if ( userChoice == 5 ) {
				
				searchByDecade();
				
			} else if ( userChoice == 6 ) {
				
				display();
				
			} else if ( userChoice == 7) {
				
				quit();
				
				quit = true;
				
			}
			
		}
		
		

	}
	
	/**
	 * Prompts user to choose an option
	 * @return int corresponding to the user's choice
	 */
	public static int getUserChoice() {
		
		System.out.println( "JukeBox" );
		
		System.out.println( "1. Add A Song" );
		
		System.out.println( "2. Play Top Song" );
		
		System.out.println( "3. Search By Title and Artist" );
		
		System.out.println( "4. Search By Artist" );
		
		System.out.println( "5. Search By Decade" );
		
		System.out.println( "6. Display Songs" );
		
		System.out.println( "7. Quit" );
		
		System.out.println( "Enter Choice: " );


		int userChoice = CheckInput.getIntRange( 1, 7 );
		
		return userChoice;
	}
	
	/**
	 * Choice 1 on the list
	 * Add -prompt the user for the Song’sdata, then add the Song to the list, then resort the list.
	 * 
	 */
	public static void add () {
		
		Song songToAdd = null;
		
		System.out.println( "Enter Title: " );

		String title = CheckInput.getString();
		
		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		System.out.println( "Enter Year(if no year put 0): " );
		
		int year = CheckInput.getIntRange(1000,2020);
		
		if ( year != 0 ) {
			
			System.out.println( "Enter Rating: " );

			int rating = CheckInput.getIntRange(1,5);
			
			songToAdd = new Song( title, artist, year, rating);
			
		} else {
			
			songToAdd = new Song( title, artist);
			
		}
		
		songList.add( songToAdd );
		
		songList.sort();	
		
	}
	
	/**
	 * Choice 2
	 * Play - remove the Song from the front of the list 
	 * (the song removed should always be the highest rated song in the list).  
	 * Display that Song’s information
	 */
	public static void playTopSong () {
		
		Song removedSong = songList.remove();
				
		System.out.println ( "Song Played = " + removedSong.toString() );
		
	}
	
	/**Choice 3
	 * by Title and Artist – prompt the user to enter a title and artist name, 
	 * then display the matching Song, or “Not Found” if it does not exist
	 */
	public static void searchByArtistTitle () {
		
		System.out.println( "Enter Title: " );

		String title = CheckInput.getString();
		
		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		Song searchResult = songList.searchSong( title, artist);
		
		if ( searchResult == null) {
			
			System.out.println( "Song not found" );
			
		} else {
			
			System.out.println( "Song Found : " + searchResult );
			
		}
		
		
	}
	
	/**Choice 4
	 * Artist – prompt the user to enter a artist name, 
	 * then display all songs by that artist
	 */
	public static void searchByArtist () {

		System.out.println( "Enter Artist: " );

		String artist = CheckInput.getString();
		
		ArrayList searchResult = songList.searchArtist(artist);
		
		if (searchResult.size() == 0) {
			
			System.out.println( "No results found " );
			
		} else {
			System.out.println( "Songs by Artist: " );
			
			for (int i = 0; i < searchResult.size(); i++) {
				
				System.out.println( searchResult.get(i) );
				
			}
			
		}
		
		

	}
	
	/**Choice 5
	 * by Decade – prompt the user to enter a decade, 
	 * then display all Songs in the list from that decade (ex. 80’s = 1980-1989)
	 */
	public static void searchByDecade () {

		System.out.println( "Enter Decade(Format 1970, 1980... etc) : " );

		int decade = CheckInput.getIntRange(1000, 2020);
		
		ArrayList searchResult = songList.searchDecade(decade);
		
		if (searchResult.size() == 0) {
			
			System.out.println( "No results found " );
			
		} else {
			System.out.println( "Songs in Decade: " );
			
			for (int i = 0; i < searchResult.size(); i++) {
				
				System.out.println( searchResult.get(i) );
				
			}
			
		}
		
		songList.searchDecade(decade);
	}
	
	/**Choice 6
	 * Display –display the number of songs, 
	 * then display each of the Songs in the list 
	 * (they should already be sorted by rating
	 */
	public static void display () {

		songList.display();
		
	}
	
	/**Choice 7
	 * Write the list of Songs back to the file using the toString() function
	 */
	public static void quit() {
		
        try{    
        	
        	//writes the updated list back to the same file
            PrintWriter fw=new PrintWriter("songs.txt");  
            
            int sizeOfList = songList.size();
            
            for ( int i = 0; i < sizeOfList ; i++) {
            	
            	String theSong = songList.remove().toString();
            	
            	fw.write( theSong + "\n");  
            	
            }
              
            fw.close();    
            
           }catch(Exception e){
        	   
        	   System.out.println(e);
        	   
        	   }    
        
           System.out.println("Success..."); 
        
	}

	
	/**
	 *  Pass in the user’s file selection and the 2D array of Strings.  
	 *  Read in the file’s contents and place two of each card value in the array
	 *  @param int userFile selection
	 *  @param String[][] array the empty deck
	 * @throws FileNotFoundException 
	 * */
	public static void readFile() throws FileNotFoundException {
		
		//file to read songs out from
		File myObj = new File(  "songs.txt" );
		
		Scanner myReader = new Scanner( myObj );
		
		String data = "";

		while ( data != null) {
			
			int beginIndex = 0;
			
			int endIndex = 0;
			
			String title = "";
			
			String artist = "";
			
			int year = 0;
			
			int rating = 0;
			
			Song songToAdd = null;
			
			if( myReader.hasNextLine() ){
				
				data = myReader.nextLine();
				  
			} else {
				
				break;
				
			}
			
			for (int i = 0; i < data.length(); i++) {
				
				
				if ( data.charAt(i) != ',' ) {
					
					endIndex = i + 1;
					
				} else if ( data.charAt(i) == ',' && title.equals("")) {
					
					title = data.substring(beginIndex , endIndex);
					beginIndex = endIndex;

					
				} else if ( data.charAt(i) == ',' && artist.equals("")) {
					
					artist = data.substring(beginIndex + 1, endIndex);
					beginIndex = endIndex;

					
				} else if ( data.charAt(i) == ',' && year == 0) {
					
					year = Integer.parseInt(( data.substring( beginIndex + 1, endIndex )));
					beginIndex = endIndex;
					endIndex += 2;
					
					rating = Integer.parseInt(( data.substring( beginIndex + 1, endIndex )));
					 
				} 
				
				
				
				if ( year == 0 ) {
					
					songToAdd = new Song( title, artist );
					
				} else if ( year != 0 ) {
					
					songToAdd = new Song( title, artist, year, rating );
					
				}
				
			}
			songList.add(songToAdd);	
			
			
		}
		myReader.close();
	}
}
